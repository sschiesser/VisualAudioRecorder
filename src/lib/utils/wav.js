function floatTo16BitPCM(float32){const buffer=new ArrayBuffer(float32.length*2),view=new DataView(buffer);let o=0;for(let i=0;i<float32.length;i++){let s=Math.max(-1,Math.min(1,float32[i]));s=s<0?s*0x8000:s*0x7FFF;view.setInt16(o,s,true);o+=2}return new Uint8Array(buffer)}
export function encodeWavPCM16(float32,sampleRate){const pcm16=floatTo16BitPCM(float32),numChannels=1,blockAlign=numChannels*2,byteRate=sampleRate*blockAlign,dataSize=pcm16.byteLength,buffer=new ArrayBuffer(44+dataSize),view=new DataView(buffer);const w=(o,s)=>{for(let i=0;i<s.length;i++)view.setUint8(o+i,s.charCodeAt(i))};let o=0;w(o,'RIFF');o+=4;view.setUint32(o,36+dataSize,true);o+=4;w(o,'WAVE');o+=4;w(o,'fmt ');o+=4;view.setUint32(o,16,true);o+=4;view.setUint16(o,1,true);o+=2;view.setUint16(o,numChannels,true);o+=2;view.setUint32(o,sampleRate,true);o+=4;view.setUint32(o,byteRate,true);o+=4;view.setUint16(o,blockAlign,true);o+=2;view.setUint16(o,16,true);o+=2;w(o,'data');o+=4;view.setUint32(o,dataSize,true);o+=4;new Uint8Array(buffer,44).set(pcm16);return new Blob([buffer],{type:'audio/wav'})}